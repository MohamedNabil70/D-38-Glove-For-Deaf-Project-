
Glove_For_Deaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000f2  008000f2  00000c48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d95  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  00002ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118d  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  000046fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  000049a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f52  00000000  00000000  00004feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3f       	cpi	r26, 0xFC	; 252
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 05 	call	0xad0	; 0xad0 <main>
  8a:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
	
	
	void ADC_init(void)
	{
	//Select Vref
	SET_BIT(ADMUX,6);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	87 b9       	out	0x07, r24	; 7
	
	//Select Right Adjustment
	CLR_BIT(ADMUX,5);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
	
	//Single conversation mode (Auto trigger off)
	CLR_BIT(ADCSRA,5);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	86 b9       	out	0x06, r24	; 6

	//Disable interrupt Enable bit
	CLR_BIT(ADCSRA,3);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	86 b9       	out	0x06, r24	; 6

//Reduce CLK Frequency by factor of [128] (from 16 Mhz to 125 Khz)
	SET_BIT(ADCSRA,0);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable
	SET_BIT(ADCSRA,7);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	08 95       	ret

000000ca <ADC_getDigitalValue>:
	}
	
	
	void ADC_getDigitalValue(u8 channelNum , u16* digitalReading)
	{
		if ((channelNum<32) && (digitalReading!=NULL))
  ca:	80 32       	cpi	r24, 0x20	; 32
  cc:	b0 f4       	brcc	.+44     	; 0xfa <ADC_getDigitalValue+0x30>
  ce:	61 15       	cp	r22, r1
  d0:	71 05       	cpc	r23, r1
  d2:	99 f0       	breq	.+38     	; 0xfa <ADC_getDigitalValue+0x30>
		{
		//clear only  ADC channel bits from ADMUX REG       
		ADMUX &= 0b11100000;			 
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	90 7e       	andi	r25, 0xE0	; 224
  d8:	97 b9       	out	0x07, r25	; 7
		//add only ADC channel bits to ADMUX REG	
		ADMUX |= channelNum;
  da:	97 b1       	in	r25, 0x07	; 7
  dc:	89 2b       	or	r24, r25
  de:	87 b9       	out	0x07, r24	; 7
		
		//Start Conversion
		SET_BIT(ADCSRA,6);
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	86 b9       	out	0x06, r24	; 6
		
		//Polling with blocking for Flag
		while(GET_BIT(ADCSRA,4) == 0);
  e6:	34 9b       	sbis	0x06, 4	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <ADC_getDigitalValue+0x1c>
		
		//Clear flag by setting it to 1 (write 1 to clr)
		SET_BIT(ADCSRA,4);
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	86 b9       	out	0x06, r24	; 6
		
		*digitalReading=ADC_u16;		
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	fb 01       	movw	r30, r22
  f6:	91 83       	std	Z+1, r25	; 0x01
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <ADC_getAnalogValue>:

		}
	}
	
	void ADC_getAnalogValue(u8 channelNum, u16* analogReading)
	{
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	00 d0       	rcall	.+0      	; 0x106 <ADC_getAnalogValue+0xa>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	8b 01       	movw	r16, r22
			u16 digitalVal;
			ADC_getDigitalValue(channelNum ,&digitalVal);
 10c:	be 01       	movw	r22, r28
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	0e 94 65 00 	call	0xca	; 0xca <ADC_getDigitalValue>
			
			*analogReading=(((u32)digitalVal*5000UL)/(1024));
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	a8 e8       	ldi	r26, 0x88	; 136
 11c:	b3 e1       	ldi	r27, 0x13	; 19
 11e:	0e 94 80 05 	call	0xb00	; 0xb00 <__umulhisi3>
 122:	dc 01       	movw	r26, r24
 124:	cb 01       	movw	r24, r22
 126:	07 2e       	mov	r0, r23
 128:	7a e0       	ldi	r23, 0x0A	; 10
 12a:	b6 95       	lsr	r27
 12c:	a7 95       	ror	r26
 12e:	97 95       	ror	r25
 130:	87 95       	ror	r24
 132:	7a 95       	dec	r23
 134:	d1 f7       	brne	.-12     	; 0x12a <ADC_getAnalogValue+0x2e>
 136:	70 2d       	mov	r23, r0
 138:	f8 01       	movw	r30, r16
 13a:	91 83       	std	Z+1, r25	; 0x01
 13c:	80 83       	st	Z, r24
				
	}
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	08 f0       	brcs	.+2      	; 0x152 <DIO_setPinDirection+0x6>
 150:	72 c0       	rjmp	.+228    	; 0x236 <DIO_setPinDirection+0xea>
 152:	68 30       	cpi	r22, 0x08	; 8
 154:	08 f0       	brcs	.+2      	; 0x158 <DIO_setPinDirection+0xc>
 156:	6f c0       	rjmp	.+222    	; 0x236 <DIO_setPinDirection+0xea>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinDirection+0x12>
 15c:	6c c0       	rjmp	.+216    	; 0x236 <DIO_setPinDirection+0xea>
{
switch(PortId)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	01 f1       	breq	.+64     	; 0x1a2 <DIO_setPinDirection+0x56>
 162:	30 f0       	brcs	.+12     	; 0x170 <DIO_setPinDirection+0x24>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	b1 f1       	breq	.+108    	; 0x1d4 <DIO_setPinDirection+0x88>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	09 f4       	brne	.+2      	; 0x16e <DIO_setPinDirection+0x22>
 16c:	4c c0       	rjmp	.+152    	; 0x206 <DIO_setPinDirection+0xba>
 16e:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	59 f4       	brne	.+22     	; 0x18a <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_setPinDirection+0x34>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_setPinDirection+0x30>
 184:	82 2b       	or	r24, r18
 186:	8a bb       	out	0x1a, r24	; 26
 188:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
 18a:	2a b3       	in	r18, 0x1a	; 26
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_setPinDirection+0x4a>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_setPinDirection+0x46>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
 1a6:	27 b3       	in	r18, 0x17	; 23
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinDirection+0x66>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinDirection+0x62>
 1b6:	82 2b       	or	r24, r18
 1b8:	87 bb       	out	0x17, r24	; 23
 1ba:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
 1bc:	27 b3       	in	r18, 0x17	; 23
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_setPinDirection+0x7c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_setPinDirection+0x78>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 1d8:	24 b3       	in	r18, 0x14	; 20
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinDirection+0x98>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinDirection+0x94>
 1e8:	82 2b       	or	r24, r18
 1ea:	84 bb       	out	0x14, r24	; 20
 1ec:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 1ee:	24 b3       	in	r18, 0x14	; 20
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setPinDirection+0xae>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setPinDirection+0xaa>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	84 bb       	out	0x14, r24	; 20
 204:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 20a:	21 b3       	in	r18, 0x11	; 17
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinDirection+0xca>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinDirection+0xc6>
 21a:	82 2b       	or	r24, r18
 21c:	81 bb       	out	0x11, r24	; 17
 21e:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 220:	21 b3       	in	r18, 0x11	; 17
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_setPinDirection+0xe0>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_setPinDirection+0xdc>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	81 bb       	out	0x11, r24	; 17
 236:	08 95       	ret

00000238 <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	08 f0       	brcs	.+2      	; 0x23e <DIO_setPinValue+0x6>
 23c:	72 c0       	rjmp	.+228    	; 0x322 <DIO_setPinValue+0xea>
 23e:	68 30       	cpi	r22, 0x08	; 8
 240:	08 f0       	brcs	.+2      	; 0x244 <DIO_setPinValue+0xc>
 242:	6f c0       	rjmp	.+222    	; 0x322 <DIO_setPinValue+0xea>
 244:	42 30       	cpi	r20, 0x02	; 2
 246:	08 f0       	brcs	.+2      	; 0x24a <DIO_setPinValue+0x12>
 248:	6c c0       	rjmp	.+216    	; 0x322 <DIO_setPinValue+0xea>
{
switch(PortId)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	01 f1       	breq	.+64     	; 0x28e <DIO_setPinValue+0x56>
 24e:	30 f0       	brcs	.+12     	; 0x25c <DIO_setPinValue+0x24>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	b1 f1       	breq	.+108    	; 0x2c0 <DIO_setPinValue+0x88>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_setPinValue+0x22>
 258:	4c c0       	rjmp	.+152    	; 0x2f2 <DIO_setPinValue+0xba>
 25a:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_setPinValue+0x34>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_setPinValue+0x30>
 270:	82 2b       	or	r24, r18
 272:	8b bb       	out	0x1b, r24	; 27
 274:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_setPinValue+0x4a>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_setPinValue+0x46>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	59 f4       	brne	.+22     	; 0x2a8 <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 292:	28 b3       	in	r18, 0x18	; 24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_setPinValue+0x66>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_setPinValue+0x62>
 2a2:	82 2b       	or	r24, r18
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 2a8:	28 b3       	in	r18, 0x18	; 24
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinValue+0x7c>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinValue+0x78>
 2b8:	80 95       	com	r24
 2ba:	82 23       	and	r24, r18
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	59 f4       	brne	.+22     	; 0x2da <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 2c4:	25 b3       	in	r18, 0x15	; 21
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_setPinValue+0x98>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_setPinValue+0x94>
 2d4:	82 2b       	or	r24, r18
 2d6:	85 bb       	out	0x15, r24	; 21
 2d8:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 2da:	25 b3       	in	r18, 0x15	; 21
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_setPinValue+0xae>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_setPinValue+0xaa>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	85 bb       	out	0x15, r24	; 21
 2f0:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	59 f4       	brne	.+22     	; 0x30c <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 2f6:	22 b3       	in	r18, 0x12	; 18
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_setPinValue+0xca>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_setPinValue+0xc6>
 306:	82 2b       	or	r24, r18
 308:	82 bb       	out	0x12, r24	; 18
 30a:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 30c:	22 b3       	in	r18, 0x12	; 18
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_setPinValue+0xe0>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_setPinValue+0xdc>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	82 bb       	out	0x12, r24	; 18
 322:	08 95       	ret

00000324 <FLEX_init>:
extern u16 analogValue2,analogValue4,analogValue5,analogValue6,analogValue7;

void FLEX_init(void)
{
	// Set Directions
	DIO_setPinDirection(DIO_PORTA,DIO_PIN2,DIO_PIN_INPUT);
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>

	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_INPUT);
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_INPUT);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_INPUT);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_INPUT);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	67 e0       	ldi	r22, 0x07	; 7
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 356:	08 95       	ret

00000358 <FLEX_getAnalogValue>:
}

void FLEX_getAnalogValue(void)
{
	
		ADC_getAnalogValue(ADC_CHANNEL_2,&analogValue2);
 358:	66 ef       	ldi	r22, 0xF6	; 246
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_getAnalogValue>
		ADC_getAnalogValue(ADC_CHANNEL_4,&analogValue4);
 362:	64 ef       	ldi	r22, 0xF4	; 244
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_getAnalogValue>
		ADC_getAnalogValue(ADC_CHANNEL_5,&analogValue5);
 36c:	6a ef       	ldi	r22, 0xFA	; 250
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	85 e0       	ldi	r24, 0x05	; 5
 372:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_getAnalogValue>
		ADC_getAnalogValue(ADC_CHANNEL_6,&analogValue6);
 376:	68 ef       	ldi	r22, 0xF8	; 248
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_getAnalogValue>
		ADC_getAnalogValue(ADC_CHANNEL_7,&analogValue7);
 380:	62 ef       	ldi	r22, 0xF2	; 242
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	87 e0       	ldi	r24, 0x07	; 7
 386:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_getAnalogValue>
 38a:	08 95       	ret

0000038c <FLEX_translateSign>:
	
}

void FLEX_translateSign(void)
{
	  if ((FINGER_1>860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5>425))
 38c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <analogValue5>
 390:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <analogValue5+0x1>
 394:	8d 35       	cpi	r24, 0x5D	; 93
 396:	23 e0       	ldi	r18, 0x03	; 3
 398:	92 07       	cpc	r25, r18
 39a:	08 f1       	brcs	.+66     	; 0x3de <FLEX_translateSign+0x52>
 39c:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 3a0:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 3a4:	24 3d       	cpi	r18, 0xD4	; 212
 3a6:	33 40       	sbci	r19, 0x03	; 3
 3a8:	d0 f4       	brcc	.+52     	; 0x3de <FLEX_translateSign+0x52>
 3aa:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 3ae:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 3b2:	24 3d       	cpi	r18, 0xD4	; 212
 3b4:	33 40       	sbci	r19, 0x03	; 3
 3b6:	98 f4       	brcc	.+38     	; 0x3de <FLEX_translateSign+0x52>
 3b8:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 3bc:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 3c0:	27 3b       	cpi	r18, 0xB7	; 183
 3c2:	33 40       	sbci	r19, 0x03	; 3
 3c4:	60 f0       	brcs	.+24     	; 0x3de <FLEX_translateSign+0x52>
 3c6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 3ca:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 3ce:	2a 3a       	cpi	r18, 0xAA	; 170
 3d0:	31 40       	sbci	r19, 0x01	; 1
 3d2:	28 f0       	brcs	.+10     	; 0x3de <FLEX_translateSign+0x52>
	  {
		  LCD_sendString((u8*)"I Love You <3");
 3d4:	80 e6       	ldi	r24, 0x60	; 96
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 3dc:	08 95       	ret
		  
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5<425))
 3de:	8d 35       	cpi	r24, 0x5D	; 93
 3e0:	23 e0       	ldi	r18, 0x03	; 3
 3e2:	92 07       	cpc	r25, r18
 3e4:	08 f1       	brcs	.+66     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3e6:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 3ea:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 3ee:	24 3d       	cpi	r18, 0xD4	; 212
 3f0:	33 40       	sbci	r19, 0x03	; 3
 3f2:	d0 f4       	brcc	.+52     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3f4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 3f8:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 3fc:	24 3d       	cpi	r18, 0xD4	; 212
 3fe:	33 40       	sbci	r19, 0x03	; 3
 400:	98 f4       	brcc	.+38     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 402:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 406:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 40a:	27 3b       	cpi	r18, 0xB7	; 183
 40c:	33 40       	sbci	r19, 0x03	; 3
 40e:	60 f0       	brcs	.+24     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 410:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 414:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 418:	29 3a       	cpi	r18, 0xA9	; 169
 41a:	31 40       	sbci	r19, 0x01	; 1
 41c:	28 f4       	brcc	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	  {
		  LCD_sendString((u8*)"That's Awesome !");
 41e:	8e e6       	ldi	r24, 0x6E	; 110
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 426:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2>980)  && (FINGER_3>980)  && (FINGER_4>950)  && (FINGER_5<425))
 428:	8d 35       	cpi	r24, 0x5D	; 93
 42a:	23 e0       	ldi	r18, 0x03	; 3
 42c:	92 07       	cpc	r25, r18
 42e:	08 f1       	brcs	.+66     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 430:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 434:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 438:	25 3d       	cpi	r18, 0xD5	; 213
 43a:	33 40       	sbci	r19, 0x03	; 3
 43c:	d0 f0       	brcs	.+52     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 43e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 442:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 446:	25 3d       	cpi	r18, 0xD5	; 213
 448:	33 40       	sbci	r19, 0x03	; 3
 44a:	98 f0       	brcs	.+38     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 44c:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 450:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 454:	27 3b       	cpi	r18, 0xB7	; 183
 456:	33 40       	sbci	r19, 0x03	; 3
 458:	60 f0       	brcs	.+24     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 45a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 45e:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 462:	29 3a       	cpi	r18, 0xA9	; 169
 464:	31 40       	sbci	r19, 0x01	; 1
 466:	28 f4       	brcc	.+10     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	  {
		  LCD_sendString((u8*)"HELLO !");
 468:	8f e7       	ldi	r24, 0x7F	; 127
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 470:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4<950)  && (FINGER_5>425))
 472:	8c 35       	cpi	r24, 0x5C	; 92
 474:	23 e0       	ldi	r18, 0x03	; 3
 476:	92 07       	cpc	r25, r18
 478:	08 f5       	brcc	.+66     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 47a:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 47e:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 482:	24 3d       	cpi	r18, 0xD4	; 212
 484:	33 40       	sbci	r19, 0x03	; 3
 486:	d0 f4       	brcc	.+52     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 488:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 48c:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 490:	24 3d       	cpi	r18, 0xD4	; 212
 492:	33 40       	sbci	r19, 0x03	; 3
 494:	98 f4       	brcc	.+38     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 496:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 49a:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 49e:	26 3b       	cpi	r18, 0xB6	; 182
 4a0:	33 40       	sbci	r19, 0x03	; 3
 4a2:	60 f4       	brcc	.+24     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4a4:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 4a8:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 4ac:	2a 3a       	cpi	r18, 0xAA	; 170
 4ae:	31 40       	sbci	r19, 0x01	; 1
 4b0:	28 f0       	brcs	.+10     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
	  {
		  LCD_sendString((u8*)"Good Job");
 4b2:	87 e8       	ldi	r24, 0x87	; 135
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 4ba:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3>980)  && (FINGER_4>950)  && (FINGER_5<425))
 4bc:	8c 35       	cpi	r24, 0x5C	; 92
 4be:	23 e0       	ldi	r18, 0x03	; 3
 4c0:	92 07       	cpc	r25, r18
 4c2:	08 f5       	brcc	.+66     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4c4:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 4c8:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 4cc:	24 3d       	cpi	r18, 0xD4	; 212
 4ce:	33 40       	sbci	r19, 0x03	; 3
 4d0:	d0 f4       	brcc	.+52     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4d2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 4d6:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 4da:	25 3d       	cpi	r18, 0xD5	; 213
 4dc:	33 40       	sbci	r19, 0x03	; 3
 4de:	98 f0       	brcs	.+38     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4e0:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 4e4:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 4e8:	27 3b       	cpi	r18, 0xB7	; 183
 4ea:	33 40       	sbci	r19, 0x03	; 3
 4ec:	60 f0       	brcs	.+24     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4ee:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 4f2:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 4f6:	29 3a       	cpi	r18, 0xA9	; 169
 4f8:	31 40       	sbci	r19, 0x01	; 1
 4fa:	28 f4       	brcc	.+10     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
	  {
		  LCD_sendString((u8*)"I'm Watching You");
 4fc:	80 e9       	ldi	r24, 0x90	; 144
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 504:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5<425))
 506:	8c 35       	cpi	r24, 0x5C	; 92
 508:	23 e0       	ldi	r18, 0x03	; 3
 50a:	92 07       	cpc	r25, r18
 50c:	08 f5       	brcc	.+66     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 50e:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 512:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 516:	24 3d       	cpi	r18, 0xD4	; 212
 518:	33 40       	sbci	r19, 0x03	; 3
 51a:	d0 f4       	brcc	.+52     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 51c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 520:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 524:	24 3d       	cpi	r18, 0xD4	; 212
 526:	33 40       	sbci	r19, 0x03	; 3
 528:	98 f4       	brcc	.+38     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 52a:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 52e:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 532:	27 3b       	cpi	r18, 0xB7	; 183
 534:	33 40       	sbci	r19, 0x03	; 3
 536:	60 f0       	brcs	.+24     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 538:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 53c:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 540:	29 3a       	cpi	r18, 0xA9	; 169
 542:	31 40       	sbci	r19, 0x01	; 1
 544:	28 f4       	brcc	.+10     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
	  {
		  LCD_sendString((u8*)"You !");
 546:	81 ea       	ldi	r24, 0xA1	; 161
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 54e:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2<980)  && (FINGER_3>980)  && (FINGER_4>950)  && (FINGER_5>425))
 550:	8d 35       	cpi	r24, 0x5D	; 93
 552:	23 e0       	ldi	r18, 0x03	; 3
 554:	92 07       	cpc	r25, r18
 556:	08 f1       	brcs	.+66     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 558:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 55c:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 560:	24 3d       	cpi	r18, 0xD4	; 212
 562:	33 40       	sbci	r19, 0x03	; 3
 564:	d0 f4       	brcc	.+52     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 566:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 56a:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 56e:	25 3d       	cpi	r18, 0xD5	; 213
 570:	33 40       	sbci	r19, 0x03	; 3
 572:	98 f0       	brcs	.+38     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 574:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 578:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 57c:	27 3b       	cpi	r18, 0xB7	; 183
 57e:	33 40       	sbci	r19, 0x03	; 3
 580:	60 f0       	brcs	.+24     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 582:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 586:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 58a:	2a 3a       	cpi	r18, 0xAA	; 170
 58c:	31 40       	sbci	r19, 0x01	; 1
 58e:	28 f0       	brcs	.+10     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
	  {
		  LCD_sendString((u8*)"I Really Love U");
 590:	87 ea       	ldi	r24, 0xA7	; 167
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 598:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4<950)  && (FINGER_5<425))
 59a:	8c 35       	cpi	r24, 0x5C	; 92
 59c:	23 e0       	ldi	r18, 0x03	; 3
 59e:	92 07       	cpc	r25, r18
 5a0:	08 f5       	brcc	.+66     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5a2:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 5a6:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 5aa:	24 3d       	cpi	r18, 0xD4	; 212
 5ac:	33 40       	sbci	r19, 0x03	; 3
 5ae:	d0 f4       	brcc	.+52     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5b0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 5b4:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 5b8:	24 3d       	cpi	r18, 0xD4	; 212
 5ba:	33 40       	sbci	r19, 0x03	; 3
 5bc:	98 f4       	brcc	.+38     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5be:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 5c2:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 5c6:	26 3b       	cpi	r18, 0xB6	; 182
 5c8:	33 40       	sbci	r19, 0x03	; 3
 5ca:	60 f4       	brcc	.+24     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5cc:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 5d0:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 5d4:	29 3a       	cpi	r18, 0xA9	; 169
 5d6:	31 40       	sbci	r19, 0x01	; 1
 5d8:	28 f4       	brcc	.+10     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
	  {
		  LCD_sendString((u8*)"Sorry");
 5da:	87 eb       	ldi	r24, 0xB7	; 183
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 5e2:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2>980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5<425))
 5e4:	8d 35       	cpi	r24, 0x5D	; 93
 5e6:	23 e0       	ldi	r18, 0x03	; 3
 5e8:	92 07       	cpc	r25, r18
 5ea:	08 f1       	brcs	.+66     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 5ec:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 5f0:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 5f4:	25 3d       	cpi	r18, 0xD5	; 213
 5f6:	33 40       	sbci	r19, 0x03	; 3
 5f8:	d0 f0       	brcs	.+52     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 5fa:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 5fe:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 602:	24 3d       	cpi	r18, 0xD4	; 212
 604:	33 40       	sbci	r19, 0x03	; 3
 606:	98 f4       	brcc	.+38     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 608:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 60c:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 610:	27 3b       	cpi	r18, 0xB7	; 183
 612:	33 40       	sbci	r19, 0x03	; 3
 614:	60 f0       	brcs	.+24     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 616:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 61a:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 61e:	29 3a       	cpi	r18, 0xA9	; 169
 620:	31 40       	sbci	r19, 0x01	; 1
 622:	28 f4       	brcc	.+10     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
	  {
		  LCD_sendString((u8*)"Like ");
 624:	8d eb       	ldi	r24, 0xBD	; 189
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 62c:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5>425))
 62e:	8c 35       	cpi	r24, 0x5C	; 92
 630:	23 e0       	ldi	r18, 0x03	; 3
 632:	92 07       	cpc	r25, r18
 634:	08 f5       	brcc	.+66     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 636:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 63a:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 63e:	24 3d       	cpi	r18, 0xD4	; 212
 640:	33 40       	sbci	r19, 0x03	; 3
 642:	d0 f4       	brcc	.+52     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 644:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 648:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 64c:	24 3d       	cpi	r18, 0xD4	; 212
 64e:	33 40       	sbci	r19, 0x03	; 3
 650:	98 f4       	brcc	.+38     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 652:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 656:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 65a:	27 3b       	cpi	r18, 0xB7	; 183
 65c:	33 40       	sbci	r19, 0x03	; 3
 65e:	60 f0       	brcs	.+24     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
 660:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 664:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 668:	2a 3a       	cpi	r18, 0xAA	; 170
 66a:	31 40       	sbci	r19, 0x01	; 1
 66c:	28 f0       	brcs	.+10     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
	  {
		  LCD_sendString((u8*)"Brother");
 66e:	83 ec       	ldi	r24, 0xC3	; 195
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 676:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4<950)  && (FINGER_5>425))
 678:	8d 35       	cpi	r24, 0x5D	; 93
 67a:	23 e0       	ldi	r18, 0x03	; 3
 67c:	92 07       	cpc	r25, r18
 67e:	08 f1       	brcs	.+66     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 680:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 684:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 688:	24 3d       	cpi	r18, 0xD4	; 212
 68a:	33 40       	sbci	r19, 0x03	; 3
 68c:	d0 f4       	brcc	.+52     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 68e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 692:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 696:	24 3d       	cpi	r18, 0xD4	; 212
 698:	33 40       	sbci	r19, 0x03	; 3
 69a:	98 f4       	brcc	.+38     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 69c:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 6a0:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 6a4:	26 3b       	cpi	r18, 0xB6	; 182
 6a6:	33 40       	sbci	r19, 0x03	; 3
 6a8:	60 f4       	brcc	.+24     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 6aa:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 6ae:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 6b2:	2a 3a       	cpi	r18, 0xAA	; 170
 6b4:	31 40       	sbci	r19, 0x01	; 1
 6b6:	28 f0       	brcs	.+10     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
	  {
		  LCD_sendString((u8*)"Phone");
 6b8:	8b ec       	ldi	r24, 0xCB	; 203
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 6c0:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2>980)  && (FINGER_3>980)  && (FINGER_4<950)  && (FINGER_5<425))
 6c2:	8d 35       	cpi	r24, 0x5D	; 93
 6c4:	23 e0       	ldi	r18, 0x03	; 3
 6c6:	92 07       	cpc	r25, r18
 6c8:	08 f1       	brcs	.+66     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6ca:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 6ce:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 6d2:	25 3d       	cpi	r18, 0xD5	; 213
 6d4:	33 40       	sbci	r19, 0x03	; 3
 6d6:	d0 f0       	brcs	.+52     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6d8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 6dc:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 6e0:	25 3d       	cpi	r18, 0xD5	; 213
 6e2:	33 40       	sbci	r19, 0x03	; 3
 6e4:	98 f0       	brcs	.+38     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6e6:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 6ea:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 6ee:	26 3b       	cpi	r18, 0xB6	; 182
 6f0:	33 40       	sbci	r19, 0x03	; 3
 6f2:	60 f4       	brcc	.+24     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6f4:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 6f8:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 6fc:	29 3a       	cpi	r18, 0xA9	; 169
 6fe:	31 40       	sbci	r19, 0x01	; 1
 700:	28 f4       	brcc	.+10     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
	  {
		  LCD_sendString((u8*)"Perfect");
 702:	81 ed       	ldi	r24, 0xD1	; 209
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 70a:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2<980)  && (FINGER_3<980)  && (FINGER_4<950)  && (FINGER_5<425))
 70c:	8d 35       	cpi	r24, 0x5D	; 93
 70e:	23 e0       	ldi	r18, 0x03	; 3
 710:	92 07       	cpc	r25, r18
 712:	08 f1       	brcs	.+66     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
 714:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 718:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 71c:	24 3d       	cpi	r18, 0xD4	; 212
 71e:	33 40       	sbci	r19, 0x03	; 3
 720:	d0 f4       	brcc	.+52     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
 722:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 726:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 72a:	24 3d       	cpi	r18, 0xD4	; 212
 72c:	33 40       	sbci	r19, 0x03	; 3
 72e:	98 f4       	brcc	.+38     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
 730:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 734:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 738:	26 3b       	cpi	r18, 0xB6	; 182
 73a:	33 40       	sbci	r19, 0x03	; 3
 73c:	60 f4       	brcc	.+24     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
 73e:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 742:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 746:	29 3a       	cpi	r18, 0xA9	; 169
 748:	31 40       	sbci	r19, 0x01	; 1
 74a:	28 f4       	brcc	.+10     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
	  {
		  LCD_sendString((u8*)"End");
 74c:	89 ed       	ldi	r24, 0xD9	; 217
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 754:	08 95       	ret
	  }
	  
	  else if ((FINGER_1<860)  && (FINGER_2<980)  && (FINGER_3>980)  && (FINGER_4>950)  && (FINGER_5>425))
 756:	8c 35       	cpi	r24, 0x5C	; 92
 758:	23 e0       	ldi	r18, 0x03	; 3
 75a:	92 07       	cpc	r25, r18
 75c:	08 f5       	brcc	.+66     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
 75e:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <analogValue4>
 762:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 766:	24 3d       	cpi	r18, 0xD4	; 212
 768:	33 40       	sbci	r19, 0x03	; 3
 76a:	d0 f4       	brcc	.+52     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
 76c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__data_end>
 770:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__data_end+0x1>
 774:	25 3d       	cpi	r18, 0xD5	; 213
 776:	33 40       	sbci	r19, 0x03	; 3
 778:	98 f0       	brcs	.+38     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
 77a:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <analogValue6>
 77e:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 782:	27 3b       	cpi	r18, 0xB7	; 183
 784:	33 40       	sbci	r19, 0x03	; 3
 786:	60 f0       	brcs	.+24     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
 788:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <analogValue2>
 78c:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 790:	2a 3a       	cpi	r18, 0xAA	; 170
 792:	31 40       	sbci	r19, 0x01	; 1
 794:	28 f0       	brcs	.+10     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
	  {
		  LCD_sendString((u8*)"Gun");
 796:	8d ed       	ldi	r24, 0xDD	; 221
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 79e:	08 95       	ret
	  }
	  
	  else if ((FINGER_1>860)  && (FINGER_2>980)  && (FINGER_3<980)  && (FINGER_4>950)  && (FINGER_5>425))
 7a0:	8d 35       	cpi	r24, 0x5D	; 93
 7a2:	93 40       	sbci	r25, 0x03	; 3
 7a4:	08 f1       	brcs	.+66     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
 7a6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <analogValue4>
 7aa:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <analogValue4+0x1>
 7ae:	85 3d       	cpi	r24, 0xD5	; 213
 7b0:	93 40       	sbci	r25, 0x03	; 3
 7b2:	d0 f0       	brcs	.+52     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
 7b4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__data_end>
 7b8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__data_end+0x1>
 7bc:	84 3d       	cpi	r24, 0xD4	; 212
 7be:	93 40       	sbci	r25, 0x03	; 3
 7c0:	98 f4       	brcc	.+38     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
 7c2:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <analogValue6>
 7c6:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <analogValue6+0x1>
 7ca:	87 3b       	cpi	r24, 0xB7	; 183
 7cc:	93 40       	sbci	r25, 0x03	; 3
 7ce:	60 f0       	brcs	.+24     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
 7d0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <analogValue2>
 7d4:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <analogValue2+0x1>
 7d8:	8a 3a       	cpi	r24, 0xAA	; 170
 7da:	91 40       	sbci	r25, 0x01	; 1
 7dc:	28 f0       	brcs	.+10     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
	  {
		  LCD_sendString((u8*)"Favorite");
 7de:	81 ee       	ldi	r24, 0xE1	; 225
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
 7e6:	08 95       	ret
	  }
	  
	  
	  else
	  {
		  LCD_sendString((u8*)"Reading");
 7e8:	8a ee       	ldi	r24, 0xEA	; 234
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f0:	4f e7       	ldi	r20, 0x7F	; 127
 7f2:	8f ea       	ldi	r24, 0xAF	; 175
 7f4:	92 e0       	ldi	r25, 0x02	; 2
 7f6:	41 50       	subi	r20, 0x01	; 1
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	90 40       	sbci	r25, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <__EEPROM_REGION_LENGTH__+0x3f6>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
 800:	00 00       	nop
		  _delay_ms(55);
		  LCD_sendChar('.');
 802:	8e e2       	ldi	r24, 0x2E	; 46
 804:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 808:	2f e7       	ldi	r18, 0x7F	; 127
 80a:	4f ea       	ldi	r20, 0xAF	; 175
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	21 50       	subi	r18, 0x01	; 1
 810:	40 40       	sbci	r20, 0x00	; 0
 812:	80 40       	sbci	r24, 0x00	; 0
 814:	e1 f7       	brne	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 818:	00 00       	nop
		  _delay_ms(55);
		  LCD_sendChar('.');
 81a:	8e e2       	ldi	r24, 0x2E	; 46
 81c:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 820:	9f e7       	ldi	r25, 0x7F	; 127
 822:	2f ea       	ldi	r18, 0xAF	; 175
 824:	42 e0       	ldi	r20, 0x02	; 2
 826:	91 50       	subi	r25, 0x01	; 1
 828:	20 40       	sbci	r18, 0x00	; 0
 82a:	40 40       	sbci	r20, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 830:	00 00       	nop
		  _delay_ms(55);
		  LCD_sendChar('.');
 832:	8e e2       	ldi	r24, 0x2E	; 46
 834:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 838:	8f e7       	ldi	r24, 0x7F	; 127
 83a:	9f ea       	ldi	r25, 0xAF	; 175
 83c:	22 e0       	ldi	r18, 0x02	; 2
 83e:	81 50       	subi	r24, 0x01	; 1
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	20 40       	sbci	r18, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 848:	00 00       	nop
		  _delay_ms(55);
		  LCD_sendChar('.');
 84a:	8e e2       	ldi	r24, 0x2E	; 46
 84c:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 850:	4f ef       	ldi	r20, 0xFF	; 255
 852:	86 e7       	ldi	r24, 0x76	; 118
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	41 50       	subi	r20, 0x01	; 1
 858:	80 40       	sbci	r24, 0x00	; 0
 85a:	90 40       	sbci	r25, 0x00	; 0
 85c:	e1 f7       	brne	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
		  _delay_ms(30);
		  LCD_sendChar('.');
 862:	8e e2       	ldi	r24, 0x2E	; 46
 864:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 868:	2f ef       	ldi	r18, 0xFF	; 255
 86a:	46 e7       	ldi	r20, 0x76	; 118
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	21 50       	subi	r18, 0x01	; 1
 870:	40 40       	sbci	r20, 0x00	; 0
 872:	80 40       	sbci	r24, 0x00	; 0
 874:	e1 f7       	brne	.-8      	; 0x86e <__stack+0xf>
 876:	00 c0       	rjmp	.+0      	; 0x878 <__stack+0x19>
 878:	00 00       	nop
		  _delay_ms(30);
		  LCD_sendChar('.');
 87a:	8e e2       	ldi	r24, 0x2E	; 46
 87c:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 880:	08 95       	ret

00000882 <writeHalfPort>:
		{
			LCD_sendChar((Local_reversed%10)+'0');
			Local_reversed /= 10;
		}while (Local_reversed != 1);
	} 
}
 882:	cf 93       	push	r28
 884:	c8 2f       	mov	r28, r24
 886:	80 ff       	sbrs	r24, 0
 888:	06 c0       	rjmp	.+12     	; 0x896 <writeHalfPort+0x14>
 88a:	41 e0       	ldi	r20, 0x01	; 1
 88c:	63 e0       	ldi	r22, 0x03	; 3
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <writeHalfPort+0x1e>
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	63 e0       	ldi	r22, 0x03	; 3
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8a0:	c1 ff       	sbrs	r28, 1
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <writeHalfPort+0x2e>
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	64 e0       	ldi	r22, 0x04	; 4
 8a8:	82 e0       	ldi	r24, 0x02	; 2
 8aa:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <writeHalfPort+0x38>
 8b0:	40 e0       	ldi	r20, 0x00	; 0
 8b2:	64 e0       	ldi	r22, 0x04	; 4
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8ba:	c2 ff       	sbrs	r28, 2
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <writeHalfPort+0x48>
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	65 e0       	ldi	r22, 0x05	; 5
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <writeHalfPort+0x52>
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	65 e0       	ldi	r22, 0x05	; 5
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8d4:	c3 ff       	sbrs	r28, 3
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <writeHalfPort+0x62>
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	66 e0       	ldi	r22, 0x06	; 6
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <writeHalfPort+0x6c>
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	66 e0       	ldi	r22, 0x06	; 6
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <LCD_setPinDirections>:
 8f2:	41 e0       	ldi	r20, 0x01	; 1
 8f4:	63 e0       	ldi	r22, 0x03	; 3
 8f6:	82 e0       	ldi	r24, 0x02	; 2
 8f8:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 8fc:	41 e0       	ldi	r20, 0x01	; 1
 8fe:	64 e0       	ldi	r22, 0x04	; 4
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 906:	41 e0       	ldi	r20, 0x01	; 1
 908:	65 e0       	ldi	r22, 0x05	; 5
 90a:	82 e0       	ldi	r24, 0x02	; 2
 90c:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	66 e0       	ldi	r22, 0x06	; 6
 914:	82 e0       	ldi	r24, 0x02	; 2
 916:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 924:	41 e0       	ldi	r20, 0x01	; 1
 926:	62 e0       	ldi	r22, 0x02	; 2
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 92e:	41 e0       	ldi	r20, 0x01	; 1
 930:	63 e0       	ldi	r22, 0x03	; 3
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_setPinDirection>
 938:	08 95       	ret

0000093a <LCD_sendCmnd>:
 93a:	cf 93       	push	r28
 93c:	c8 2f       	mov	r28, r24
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	61 e0       	ldi	r22, 0x01	; 1
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 948:	40 e0       	ldi	r20, 0x00	; 0
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 952:	8c 2f       	mov	r24, r28
 954:	82 95       	swap	r24
 956:	8f 70       	andi	r24, 0x0F	; 15
 958:	0e 94 41 04 	call	0x882	; 0x882 <writeHalfPort>
 95c:	41 e0       	ldi	r20, 0x01	; 1
 95e:	63 e0       	ldi	r22, 0x03	; 3
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 966:	8f e9       	ldi	r24, 0x9F	; 159
 968:	9f e0       	ldi	r25, 0x0F	; 15
 96a:	01 97       	sbiw	r24, 0x01	; 1
 96c:	f1 f7       	brne	.-4      	; 0x96a <LCD_sendCmnd+0x30>
 96e:	00 c0       	rjmp	.+0      	; 0x970 <LCD_sendCmnd+0x36>
 970:	00 00       	nop
 972:	40 e0       	ldi	r20, 0x00	; 0
 974:	63 e0       	ldi	r22, 0x03	; 3
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 97c:	8c 2f       	mov	r24, r28
 97e:	0e 94 41 04 	call	0x882	; 0x882 <writeHalfPort>
 982:	41 e0       	ldi	r20, 0x01	; 1
 984:	63 e0       	ldi	r22, 0x03	; 3
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 98c:	8f e9       	ldi	r24, 0x9F	; 159
 98e:	9f e0       	ldi	r25, 0x0F	; 15
 990:	01 97       	sbiw	r24, 0x01	; 1
 992:	f1 f7       	brne	.-4      	; 0x990 <LCD_sendCmnd+0x56>
 994:	00 c0       	rjmp	.+0      	; 0x996 <LCD_sendCmnd+0x5c>
 996:	00 00       	nop
 998:	40 e0       	ldi	r20, 0x00	; 0
 99a:	63 e0       	ldi	r22, 0x03	; 3
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <LCD_init>:
 9a6:	2f e7       	ldi	r18, 0x7F	; 127
 9a8:	85 eb       	ldi	r24, 0xB5	; 181
 9aa:	91 e0       	ldi	r25, 0x01	; 1
 9ac:	21 50       	subi	r18, 0x01	; 1
 9ae:	80 40       	sbci	r24, 0x00	; 0
 9b0:	90 40       	sbci	r25, 0x00	; 0
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <LCD_init+0x6>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <LCD_init+0x10>
 9b6:	00 00       	nop
 9b8:	40 e0       	ldi	r20, 0x00	; 0
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 9c2:	40 e0       	ldi	r20, 0x00	; 0
 9c4:	62 e0       	ldi	r22, 0x02	; 2
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 9cc:	82 e0       	ldi	r24, 0x02	; 2
 9ce:	0e 94 41 04 	call	0x882	; 0x882 <writeHalfPort>
 9d2:	41 e0       	ldi	r20, 0x01	; 1
 9d4:	63 e0       	ldi	r22, 0x03	; 3
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 9dc:	8f e9       	ldi	r24, 0x9F	; 159
 9de:	9f e0       	ldi	r25, 0x0F	; 15
 9e0:	01 97       	sbiw	r24, 0x01	; 1
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LCD_init+0x3a>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <LCD_init+0x40>
 9e6:	00 00       	nop
 9e8:	40 e0       	ldi	r20, 0x00	; 0
 9ea:	63 e0       	ldi	r22, 0x03	; 3
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 9f2:	88 e2       	ldi	r24, 0x28	; 40
 9f4:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_sendCmnd>
 9f8:	90 ef       	ldi	r25, 0xF0	; 240
 9fa:	9a 95       	dec	r25
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCD_init+0x54>
 9fe:	8f e0       	ldi	r24, 0x0F	; 15
 a00:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_sendCmnd>
 a04:	20 ef       	ldi	r18, 0xF0	; 240
 a06:	2a 95       	dec	r18
 a08:	f1 f7       	brne	.-4      	; 0xa06 <LCD_init+0x60>
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_sendCmnd>
 a10:	8f e3       	ldi	r24, 0x3F	; 63
 a12:	9f e1       	ldi	r25, 0x1F	; 31
 a14:	01 97       	sbiw	r24, 0x01	; 1
 a16:	f1 f7       	brne	.-4      	; 0xa14 <LCD_init+0x6e>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <LCD_init+0x74>
 a1a:	00 00       	nop
 a1c:	86 e0       	ldi	r24, 0x06	; 6
 a1e:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_sendCmnd>
 a22:	08 95       	ret

00000a24 <LCD_sendChar>:
 a24:	cf 93       	push	r28
 a26:	c8 2f       	mov	r28, r24
 a28:	41 e0       	ldi	r20, 0x01	; 1
 a2a:	61 e0       	ldi	r22, 0x01	; 1
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	62 e0       	ldi	r22, 0x02	; 2
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a3c:	8c 2f       	mov	r24, r28
 a3e:	82 95       	swap	r24
 a40:	8f 70       	andi	r24, 0x0F	; 15
 a42:	0e 94 41 04 	call	0x882	; 0x882 <writeHalfPort>
 a46:	41 e0       	ldi	r20, 0x01	; 1
 a48:	63 e0       	ldi	r22, 0x03	; 3
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a50:	8f e9       	ldi	r24, 0x9F	; 159
 a52:	9f e0       	ldi	r25, 0x0F	; 15
 a54:	01 97       	sbiw	r24, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <LCD_sendChar+0x30>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCD_sendChar+0x36>
 a5a:	00 00       	nop
 a5c:	40 e0       	ldi	r20, 0x00	; 0
 a5e:	63 e0       	ldi	r22, 0x03	; 3
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a66:	8c 2f       	mov	r24, r28
 a68:	0e 94 41 04 	call	0x882	; 0x882 <writeHalfPort>
 a6c:	41 e0       	ldi	r20, 0x01	; 1
 a6e:	63 e0       	ldi	r22, 0x03	; 3
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a76:	8f e9       	ldi	r24, 0x9F	; 159
 a78:	9f e0       	ldi	r25, 0x0F	; 15
 a7a:	01 97       	sbiw	r24, 0x01	; 1
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <LCD_sendChar+0x56>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <LCD_sendChar+0x5c>
 a80:	00 00       	nop
 a82:	40 e0       	ldi	r20, 0x00	; 0
 a84:	63 e0       	ldi	r22, 0x03	; 3
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_setPinValue>
 a8c:	cf 91       	pop	r28
 a8e:	08 95       	ret

00000a90 <LCD_sendString>:
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	29 f4       	brne	.+10     	; 0xaa4 <LCD_sendString+0x14>
 a9a:	0c c0       	rjmp	.+24     	; 0xab4 <LCD_sendString+0x24>
 a9c:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_sendChar>
 aa0:	cf 5f       	subi	r28, 0xFF	; 255
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <LCD_sendString+0x18>
 aa4:	8c 01       	movw	r16, r24
 aa6:	c0 e0       	ldi	r28, 0x00	; 0
 aa8:	f8 01       	movw	r30, r16
 aaa:	ec 0f       	add	r30, r28
 aac:	f1 1d       	adc	r31, r1
 aae:	80 81       	ld	r24, Z
 ab0:	81 11       	cpse	r24, r1
 ab2:	f4 cf       	rjmp	.-24     	; 0xa9c <LCD_sendString+0xc>
 ab4:	cf 91       	pop	r28
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	08 95       	ret

00000abc <LCD_clear>:

void LCD_clear(void)
{
	// Clear display
	LCD_sendCmnd(0b00000001);
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_sendCmnd>
 ac2:	8f e3       	ldi	r24, 0x3F	; 63
 ac4:	9f e1       	ldi	r25, 0x1F	; 31
 ac6:	01 97       	sbiw	r24, 0x01	; 1
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <LCD_clear+0xa>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <LCD_clear+0x10>
 acc:	00 00       	nop
 ace:	08 95       	ret

00000ad0 <main>:
u16 analogValue2,analogValue4,analogValue5,analogValue6,analogValue7;

int main(void)
{
	
    LCD_setPinDirections();
 ad0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LCD_setPinDirections>
	FLEX_init();	
 ad4:	0e 94 92 01 	call	0x324	; 0x324 <FLEX_init>
	
	ADC_init();
 ad8:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_init();
 adc:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCD_init>
	
	
	while (1) 
    {
		
 FLEX_getAnalogValue();
 ae0:	0e 94 ac 01 	call	0x358	; 0x358 <FLEX_getAnalogValue>

 FLEX_translateSign();
 ae4:	0e 94 c6 01 	call	0x38c	; 0x38c <FLEX_translateSign>
 ae8:	2f ef       	ldi	r18, 0xFF	; 255
 aea:	87 e8       	ldi	r24, 0x87	; 135
 aec:	93 e1       	ldi	r25, 0x13	; 19
 aee:	21 50       	subi	r18, 0x01	; 1
 af0:	80 40       	sbci	r24, 0x00	; 0
 af2:	90 40       	sbci	r25, 0x00	; 0
 af4:	e1 f7       	brne	.-8      	; 0xaee <main+0x1e>
 af6:	00 c0       	rjmp	.+0      	; 0xaf8 <main+0x28>
 af8:	00 00       	nop

   
   

   _delay_ms(400);
   LCD_clear();
 afa:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_clear>
 afe:	f0 cf       	rjmp	.-32     	; 0xae0 <main+0x10>

00000b00 <__umulhisi3>:
 b00:	a2 9f       	mul	r26, r18
 b02:	b0 01       	movw	r22, r0
 b04:	b3 9f       	mul	r27, r19
 b06:	c0 01       	movw	r24, r0
 b08:	a3 9f       	mul	r26, r19
 b0a:	70 0d       	add	r23, r0
 b0c:	81 1d       	adc	r24, r1
 b0e:	11 24       	eor	r1, r1
 b10:	91 1d       	adc	r25, r1
 b12:	b2 9f       	mul	r27, r18
 b14:	70 0d       	add	r23, r0
 b16:	81 1d       	adc	r24, r1
 b18:	11 24       	eor	r1, r1
 b1a:	91 1d       	adc	r25, r1
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
